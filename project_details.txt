При создании модели пользователя и авторизации в данном проекте рекомендуем попробовать
воспользоваться расширением для Django — Djoser (https://djoser.readthedocs.io/en/latest/).
Данная библиотека позволяет практически из коробки реализовать CRUD для модели пользователя.

Ключевые моменты для использования Djoser:

* установка: >>> pip install djoser

* добавление библиотеки в константу INSTALLED_APPS в модуле settings (данная библиотека должна идти по порядку после приложения Django.auth):
INSTALLED_APPS = [
    "django.contrib.auth",
    ...
    "djoser"
    ...
]

* настройка Djoser: также производится в модуле settings.py в константе DJOSER. В данном случае нас интересуют следующие настройки:
DJOSER = {
    'SERIALIZERS': {
        'user_create': 'users.serializers.UserRegistrationSerializer'
    },
    'LOGIN_FIELD': 'email'
}

В Djoser есть еще много опций, которые подлежат настройке, — здесь же мы определили,
что используем кастомный  serializer для создания пользователя (пригодится нам в дальнейшем),
а также поле, через которое пользователь аутентифицируется (login).

Помимо вышеперечисленных настроек, в нашем случае для корректной работы Djoser
потребуется кастомная модель пользователя. Что нам и предстоит сделать в следующем шаге.

Перейдем в приложение users в модуль models.py и создадим нашего пользователя.
Пользователь должен быть унаследован от модели AbstractBaseUser:

- from django.contrib.auth.models import AbstractBaseUser

Очень подробно об этом описывается в https://djoser.readthedocs.io/en/latest/. Мы же выделим только ключевые моменты.
Помимо полей, определенных в кратком ТЗ, в нашей модели должны быть предопределены методы
для корректной работы встроенной системы пермишенов и аутентификации пользователя.

class User(AbstractBaseUser)
# Необходимые параметры для корректной работе Django
    @property
    def is_superuser(self):
        return self.is_admin

    @property
    def is_staff(self):
        return self.is_admin

    def has_perm(self, perm, obj=None):
        return self.is_admin

    def has_module_perms(self, app_label):
        return self.is_admin

    # также для работы модели пользователя должен быть переопределен
    # менеджер объектов
    objects = UserManager()


# В качестве подсказки — эти поля имеют
# непосредственное отношение именно к нашей модели



    # эта константа определяет поле для логина пользователя
    USERNAME_FIELD = 'email'

    # эта константа содержит список с полями,
    # которые необходимо заполнить при создании пользователя
    REQUIRED_FIELDS = ['first_name', 'last_name', 'phone', "role"]

    # для корректной работы нам также необходимо
    # переопределить менеджер модели пользователя

    objects = UserManager()
    @property
    def is_admin(self):
        return self.role == UserRoles.ADMIN #

    @property
    def is_user(self):
        return self.role == UserRoles.USER